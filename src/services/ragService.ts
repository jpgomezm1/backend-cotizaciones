// src/services/ragService.ts
import { Anthropic } from '@anthropic-ai/sdk';

interface ExtractedProjectInfo {
  projectSummary: string;
  services: string[];
  pricing: {
    implementationFee?: number | null;
    monthlyFee?: number | null;
    totalAmount?: number | null;
    description?: string;
  };
  timeline?: string;
  benefits: string[];
}

interface TemplateAnalysis {
  templateType: string;
  industry: string;
  tone: string;
  mainSections: string[];
  placeholderCategories: {
    client: string[];
    project: string[];
    pricing: string[];
    dates: string[];
    company: string[];
  };
  contentStyle: string;
}

export class RAGService {
 private anthropic: Anthropic;

 constructor() {
   this.anthropic = new Anthropic({
     apiKey: process.env.ANTHROPIC_API_KEY!
   });
 }

 async processTemplate(htmlTemplate: string): Promise<string> {
   return htmlTemplate;
 }

 async generateQuotation(
   fullTemplate: string,
   clientData: {
     clientName: string;
     clientCompany?: string;
     clientEmail: string;
     clientPhone?: string;
     clientRutNit?: string;
     projectName: string;
     projectDescription: string;
   },
   templateContext?: {
     name: string;
     category: string;
     description: string;
   }
 ): Promise<string> {
   
   console.log('üöÄ Iniciando generaci√≥n gen√©rica de cotizaci√≥n...');
   console.log('üìä Contexto del template:', templateContext);

   // 1. Analizar el template para entender su estructura
   const templateAnalysis = await this.analyzeTemplate(fullTemplate, templateContext);
   console.log('üîç An√°lisis del template completado:', templateAnalysis.templateType);

   // 2. Extraer informaci√≥n del prompt del usuario
   const extractedInfo = await this.extractProjectInformation(clientData.projectDescription);
   console.log('üìä Informaci√≥n extra√≠da:', extractedInfo);

   // 3. Extraer placeholders del template
   const placeholders = this.extractPlaceholders(fullTemplate);
   console.log('üìù Placeholders encontrados:', placeholders.length);

   // 4. Generar contenido usando an√°lisis inteligente
   const placeholderContent = await this.generateIntelligentContent(
     placeholders,
     clientData,
     extractedInfo,
     templateAnalysis
   );

   // 5. Reemplazar placeholders en el template
   let finalHtml = fullTemplate;
   let replacedCount = 0;
   
   console.log('üîÑ Iniciando reemplazos inteligentes...');
   for (const [placeholder, content] of Object.entries(placeholderContent)) {
     const regex = new RegExp(`\\{\\{${placeholder}\\}\\}`, 'g');
     const matches = finalHtml.match(regex);
     if (matches) {
       finalHtml = finalHtml.replace(regex, content);
       replacedCount += matches.length;
       console.log(`   ‚úÖ ${placeholder}: "${content.substring(0, 50)}${content.length > 50 ? '...' : ''}"`);
     } else {
       console.log(`   ‚ö†Ô∏è ${placeholder}: No encontrado en template`);
     }
   }

   console.log(`‚úÖ Reemplazados ${replacedCount} placeholders de ${placeholders.length} encontrados`);
   
   // 6. Procesar placeholders restantes con IA
   const remainingPlaceholders = finalHtml.match(/\{\{[^}]+\}\}/g);
   if (remainingPlaceholders) {
     console.log('‚ö†Ô∏è Placeholders restantes:', remainingPlaceholders.slice(0, 5));
     
     finalHtml = await this.processRemainingPlaceholders(
       finalHtml,
       remainingPlaceholders,
       clientData,
       extractedInfo,
       templateAnalysis
     );
   }

   console.log('‚úÖ Cotizaci√≥n generada exitosamente con sistema gen√©rico');
   return finalHtml;
 }

 private async analyzeTemplate(
   template: string,
   templateContext?: any
 ): Promise<TemplateAnalysis> {
   const prompt = `
Analiza el siguiente template HTML y proporciona informaci√≥n sobre su estructura y prop√≥sito:

TEMPLATE CONTEXT:
${templateContext ? `
- Nombre: ${templateContext.name}
- Categor√≠a: ${templateContext.category}
- Descripci√≥n: ${templateContext.description}
` : 'Sin contexto adicional'}

TEMPLATE HTML:
${template.substring(0, 5000)}... (truncado)

Analiza y extrae:
1. TIPO DE TEMPLATE: ¬øEs para qu√© tipo de servicio/producto? (desarrollo web, marketing, consultor√≠a, eventos, etc.)
2. ESTRUCTURA: ¬øQu√© secciones principales tiene?
3. PLACEHOLDERS: Categoriza los placeholders por tipo (cliente, proyecto, precios, fechas, etc.)
4. ESTILO: ¬øQu√© tono y estilo de contenido espera? (formal, t√©cnico, comercial, etc.)
5. INDUSTRIA: ¬øPara qu√© industria o sector est√° dise√±ado?

FORMATO DE RESPUESTA - JSON:
{
  "templateType": "tipo de servicio",
  "industry": "industria objetivo",
  "tone": "tono del contenido",
  "mainSections": ["secci√≥n1", "secci√≥n2"],
  "placeholderCategories": {
    "client": ["CLIENT_NAME", "CLIENT_COMPANY"],
    "project": ["PROJECT_NAME", "PROJECT_DESCRIPTION"],
    "pricing": ["TOTAL_AMOUNT", "PRICING_1"],
    "dates": ["PROPOSAL_DATE", "DELIVERY_DATE"],
    "company": ["COMPANY_NAME", "CONSULTANT_NAME"]
  },
  "contentStyle": "descripci√≥n del estilo esperado"
}`;

   try {
     const response = await this.anthropic.messages.create({
       model: 'claude-3-5-sonnet-20241022',
       max_tokens: 2000,
       temperature: 0.3,
       messages: [{ role: 'user', content: prompt }]
     });

     const content = response.content[0].type === 'text' ? response.content[0].text : '{}';
     const jsonMatch = content.match(/\{[\s\S]*\}/);
     
     if (jsonMatch) {
       const parsed = JSON.parse(jsonMatch[0]);
       console.log('‚úÖ Template analizado exitosamente');
       return parsed;
     }
   } catch (error) {
     console.warn('‚ö†Ô∏è Error analizando template:', error);
   }

   // Fallback analysis
   return {
     templateType: "servicio general",
     industry: "tecnolog√≠a",
     tone: "profesional",
     mainSections: ["propuesta", "precios", "cronograma"],
     placeholderCategories: {
       client: [],
       project: [],
       pricing: [],
       dates: [],
       company: []
     },
     contentStyle: "profesional y t√©cnico"
   };
 }

 private async generateIntelligentContent(
   placeholders: string[],
   clientData: any,
   extractedInfo: ExtractedProjectInfo,
   templateAnalysis: TemplateAnalysis
 ): Promise<Record<string, string>> {
   
   // Base values que siempre funcionan
   const baseValues = this.getUniversalBaseValues(clientData, extractedInfo);
   
   // Identificar placeholders que necesitan generaci√≥n espec√≠fica
   const dynamicPlaceholders = placeholders.filter(p => !baseValues.hasOwnProperty(p));
   
   if (dynamicPlaceholders.length === 0) {
     console.log('‚úÖ Solo placeholders b√°sicos encontrados');
     return baseValues;
   }

   console.log(`üîÑ Procesando ${dynamicPlaceholders.length} placeholders din√°micos...`);

   // Generar contenido inteligente para placeholders din√°micos
   const intelligentContent = await this.generateContextAwareContent(
     dynamicPlaceholders,
     clientData,
     extractedInfo,
     templateAnalysis
   );

   return { ...baseValues, ...intelligentContent };
 }

 private async generateContextAwareContent(
   placeholders: string[],
   clientData: any,
   extractedInfo: ExtractedProjectInfo,
   templateAnalysis: TemplateAnalysis
 ): Promise<Record<string, string>> {
   
   const prompt = `
Genera contenido espec√≠fico para placeholders bas√°ndote en el contexto del template y proyecto.

AN√ÅLISIS DEL TEMPLATE:
- Tipo: ${templateAnalysis.templateType}
- Industria: ${templateAnalysis.industry}
- Tono: ${templateAnalysis.tone}
- Estilo: ${templateAnalysis.contentStyle}

DATOS DEL CLIENTE:
- Nombre: ${clientData.clientName}
- Empresa: ${clientData.clientCompany || 'N/A'}
- Proyecto: ${clientData.projectName}

INFORMACI√ìN DEL PROYECTO:
- Resumen: ${extractedInfo.projectSummary}
- Servicios: ${extractedInfo.services.join(', ')}
- Timeline: ${extractedInfo.timeline || 'No especificado'}

PLACEHOLDERS A COMPLETAR:
${placeholders.map(p => `{{${p}}}`).join('\n')}

INSTRUCCIONES:
1. Genera contenido apropiado para el tipo de template: ${templateAnalysis.templateType}
2. Mant√©n el tono: ${templateAnalysis.tone}
3. Adapta el contenido a la industria: ${templateAnalysis.industry}
4. Para precios: usa informaci√≥n extra√≠da o genera estimaciones realistas para ${templateAnalysis.industry}
5. Para fechas: calcula basado en el timeline del proyecto
6. Para caracter√≠sticas: basa en los servicios identificados
7. Mant√©n coherencia con el estilo: ${templateAnalysis.contentStyle}

FORMATO - JSON:
{
  "PLACEHOLDER_NAME": "contenido generado",
  "OTRO_PLACEHOLDER": "otro contenido"
}`;

   try {
     const response = await this.anthropic.messages.create({
       model: 'claude-3-5-sonnet-20241022',
       max_tokens: 4000,
       temperature: 0.7,
       messages: [{ role: 'user', content: prompt }]
     });

     const content = response.content[0].type === 'text' ? response.content[0].text : '{}';
     const jsonMatch = content.match(/\{[\s\S]*\}/);
     
     if (jsonMatch) {
       const parsed = JSON.parse(jsonMatch[0]);
       console.log(`‚úÖ Contenido inteligente generado para ${Object.keys(parsed).length} placeholders`);
       return parsed;
     }
   } catch (error) {
     console.warn('‚ö†Ô∏è Error generando contenido inteligente:', error);
   }

   return this.generateFallbackContent(placeholders, clientData, extractedInfo);
 }

 private async processRemainingPlaceholders(
   html: string,
   placeholders: string[],
   clientData: any,
   extractedInfo: ExtractedProjectInfo,
   templateAnalysis: TemplateAnalysis
 ): Promise<string> {
   
   const cleanPlaceholders = placeholders.map(p => p.replace(/[{}]/g, ''));
   
   const prompt = `
Hay placeholders sin reemplazar en este HTML. Genera contenido apropiado para completarlos.

CONTEXTO DEL TEMPLATE: ${templateAnalysis.templateType} para ${templateAnalysis.industry}
CLIENTE: ${clientData.clientName} - ${clientData.projectName}
TONO: ${templateAnalysis.tone}

PLACEHOLDERS SIN REEMPLAZAR:
${cleanPlaceholders.join(', ')}

Genera contenido corto y apropiado para cada placeholder manteniendo el tono ${templateAnalysis.tone}. 
Responde SOLO con JSON: {"PLACEHOLDER": "contenido"}`;

   try {
     const response = await this.anthropic.messages.create({
       model: 'claude-3-5-sonnet-20241022',
       max_tokens: 2000,
       temperature: 0.7,
       messages: [{ role: 'user', content: prompt }]
     });

     const content = response.content[0].type === 'text' ? response.content[0].text : '{}';
     const jsonMatch = content.match(/\{[\s\S]*\}/);
     
     if (jsonMatch) {
       const replacements = JSON.parse(jsonMatch[0]);
       
       let finalHtml = html;
       for (const [placeholder, value] of Object.entries(replacements)) {
         const cleanPlaceholder = placeholder.replace(/[{}]/g, '');
         finalHtml = finalHtml.replace(
           new RegExp(`\\{\\{${cleanPlaceholder}\\}\\}`, 'g'), 
           String(value)
         );
       }
       
       console.log(`‚úÖ Procesados ${Object.keys(replacements).length} placeholders restantes`);
       return finalHtml;
     }
   } catch (error) {
     console.warn('‚ö†Ô∏è Error procesando placeholders restantes:', error);
   }

   return html;
 }

 private getUniversalBaseValues(clientData: any, extractedInfo: ExtractedProjectInfo): Record<string, string> {
   const currentDate = new Date().toLocaleDateString('es-ES', {
     year: 'numeric',
     month: 'long',
     day: 'numeric'
   });

   return {
     // Datos del cliente (universales)
     'CLIENT_NAME': clientData.clientName,
     'CLIENT_COMPANY': clientData.clientCompany || clientData.clientName,
     'CLIENT_EMAIL': clientData.clientEmail,
     'CLIENT_PHONE': clientData.clientPhone || '',
     'CLIENT_RUT': clientData.clientRutNit || '',
     'COMPANY_NAME': clientData.clientCompany || clientData.clientName,
     'NOMBRE_CLIENTE': clientData.clientName,
     'EMPRESA_CLIENTE': clientData.clientCompany || clientData.clientName,
     'EMAIL_CLIENTE': clientData.clientEmail,
     'TELEFONO_CLIENTE': clientData.clientPhone || '',
     'RUT_CLIENTE': clientData.clientRutNit || '',
     
     // Datos del proyecto (universales)
     'PROJECT_NAME': clientData.projectName,
     'PROJECT_DESCRIPTION': extractedInfo.projectSummary,
     'SOLUTION_DESCRIPTION': extractedInfo.projectSummary,
     'NOMBRE_PROYECTO': clientData.projectName,
     'DESCRIPCION_PROYECTO': extractedInfo.projectSummary,
     
     // Fechas (universales)
     'PROPOSAL_DATE': currentDate,
     'CURRENT_DATE': currentDate,
     'DATE': currentDate,
     'FECHA_PROPUESTA': currentDate,
     'FECHA_ACTUAL': currentDate,
     'FECHA': currentDate,
    
    // Precios si est√°n disponibles
    'TOTAL_AMOUNT': extractedInfo.pricing.totalAmount ? 
      `$${extractedInfo.pricing.totalAmount.toLocaleString()}` : '$0',
    'IMPLEMENTATION_FEE': extractedInfo.pricing.implementationFee ? 
      `$${extractedInfo.pricing.implementationFee.toLocaleString()}` : '$0',
    'MONTHLY_FEE': extractedInfo.pricing.monthlyFee ? 
      `$${extractedInfo.pricing.monthlyFee.toLocaleString()}` : '$0',
    'MONTO_TOTAL': extractedInfo.pricing.totalAmount ? 
      `$${extractedInfo.pricing.totalAmount.toLocaleString()}` : '$0',
    'PRECIO_IMPLEMENTACION': extractedInfo.pricing.implementationFee ? 
      `$${extractedInfo.pricing.implementationFee.toLocaleString()}` : '$0',
    'CUOTA_MENSUAL': extractedInfo.pricing.monthlyFee ? 
      `$${extractedInfo.pricing.monthlyFee.toLocaleString()}` : '$0',
    
    // Timeline si est√° disponible
    'DELIVERY_TIME': extractedInfo.timeline || '4-6 semanas',
    'TIMELINE': extractedInfo.timeline || '4-6 semanas',
    'TIEMPO_ENTREGA': extractedInfo.timeline || '4-6 semanas',
    'CRONOGRAMA': extractedInfo.timeline || '4-6 semanas',
    
    // Valores por defecto de la empresa
    'PROPOSAL_VALIDITY': '30 d√≠as',
    'PROPOSAL_TYPE': 'Propuesta Comercial',
    'VALIDEZ_PROPUESTA': '30 d√≠as',
    'TIPO_PROPUESTA': 'Propuesta Comercial'
  };
}

private generateFallbackContent(
  placeholders: string[], 
  clientData: any, 
  extractedInfo: ExtractedProjectInfo
): Record<string, string> {
  const fallback: Record<string, string> = {};
  
  placeholders.forEach(placeholder => {
    fallback[placeholder] = this.generateGenericValue(placeholder, clientData, extractedInfo);
  });
  
  return fallback;
}

private extractPlaceholders(template: string): string[] {
  const matches = template.match(/\{\{([^}]+)\}\}/g);
  if (!matches) return [];
  
  const uniquePlaceholders = [...new Set(matches.map(match => match.replace(/[{}]/g, '')))];
  return uniquePlaceholders;
}

private generateGenericValue(placeholder: string, clientData: any, extractedInfo?: ExtractedProjectInfo): string {
  const ph = placeholder.toUpperCase();
  
  // Usar precios extra√≠dos si est√°n disponibles
  if (extractedInfo?.pricing) {
    if (ph.includes('PRICING_AMOUNT_1') && extractedInfo.pricing.implementationFee) {
      return `$${extractedInfo.pricing.implementationFee.toLocaleString()}`;
    }
    if (ph.includes('MONTHLY_FEE') && extractedInfo.pricing.monthlyFee) {
      return `$${extractedInfo.pricing.monthlyFee.toLocaleString()}`;
    }
    if (ph.includes('TOTAL_INVESTMENT') && extractedInfo.pricing.implementationFee) {
      return `$${extractedInfo.pricing.implementationFee.toLocaleString()}`;
    }
  }

  // Usar servicios extra√≠dos para features
  if (extractedInfo?.services && ph.includes('FEATURE_')) {
    const serviceIndex = parseInt(ph.match(/\d+/)?.[0] || '1') - 1;
    if (extractedInfo.services[serviceIndex]) {
      return extractedInfo.services[serviceIndex];
    }
  }

  // Beneficios extra√≠dos
  if (extractedInfo && extractedInfo.benefits && (ph.includes('BENEFIT_') || ph.includes('SAVINGS_BENEFIT_'))) {
    const benefitIndex = parseInt(ph.match(/\d+/)?.[0] || '1') - 1;
    if (extractedInfo.benefits[benefitIndex]) {
      return extractedInfo.benefits[benefitIndex];
    }
  }

  // Valores gen√©ricos basados en el nombre del placeholder
  if (ph.includes('PROBLEM_1')) {
    return 'Procesos manuales que consumen tiempo y recursos del equipo';
  } else if (ph.includes('PROBLEM_2')) {
    return 'Falta de eficiencia en los procesos actuales';
  } else if (ph.includes('PROBLEM_3')) {
    return 'Necesidad de optimizaci√≥n y automatizaci√≥n';
  } else if (ph.includes('FEATURE_1')) {
    return 'Funcionalidad principal personalizada seg√∫n requerimientos';
  } else if (ph.includes('FEATURE_2')) {
    return 'Sistema de gesti√≥n y administraci√≥n integral';
  } else if (ph.includes('FEATURE_3')) {
    return 'Interfaz intuitiva y f√°cil de usar';
  } else if (ph.includes('STEP_1_TITLE')) {
    return 'An√°lisis y Planificaci√≥n';
  } else if (ph.includes('STEP_1_DESCRIPTION')) {
    return 'Evaluaci√≥n detallada de requerimientos y planificaci√≥n del proyecto';
  } else if (ph.includes('STEP_2_TITLE')) {
    return 'Desarrollo e Implementaci√≥n';
  } else if (ph.includes('STEP_2_DESCRIPTION')) {
    return 'Construcci√≥n y configuraci√≥n de la soluci√≥n personalizada';
  } else if (ph.includes('STEP_3_TITLE')) {
    return 'Pruebas y Entrega';
  } else if (ph.includes('STEP_3_DESCRIPTION')) {
    return 'Validaci√≥n, pruebas y puesta en funcionamiento';
  } else if (ph.includes('PHASE_1_NAME')) {
    return 'Fase de An√°lisis';
  } else if (ph.includes('PHASE_1_DESCRIPTION')) {
    return 'Levantamiento de requerimientos y an√°lisis de necesidades';
  } else if (ph.includes('PHASE_1_TIME')) {
    return '1-2 semanas';
  } else if (ph.includes('PHASE_2_NAME')) {
    return 'Fase de Desarrollo';
  } else if (ph.includes('PHASE_2_DESCRIPTION')) {
    return 'Implementaci√≥n y desarrollo de la soluci√≥n';
  } else if (ph.includes('PHASE_2_TIME')) {
    return '3-4 semanas';
  } else if (ph.includes('PHASE_3_NAME')) {
    return 'Fase de Entrega';
  } else if (ph.includes('PHASE_3_DESCRIPTION')) {
    return 'Pruebas finales y puesta en producci√≥n';
  } else if (ph.includes('PHASE_3_TIME')) {
    return '1 semana';
  } else if (ph.includes('PRICING_CONCEPT_1')) {
    return extractedInfo?.services[0] || 'Desarrollo de Soluci√≥n Personalizada';
  } else if (ph.includes('PRICING_DETAIL_1')) {
    return extractedInfo?.pricing.description || 'Incluye desarrollo completo y puesta en funcionamiento';
  } else if (ph.includes('PRICING_AMOUNT_1')) {
    return extractedInfo?.pricing.implementationFee ? 
      `$${extractedInfo.pricing.implementationFee.toLocaleString()}` : '$15.000.000';
  } else if (ph.includes('TOTAL_INVESTMENT')) {
    return extractedInfo?.pricing.implementationFee ? 
      `$${extractedInfo.pricing.implementationFee.toLocaleString()}` : '$15.000.000';
  } else if (ph.includes('MONTHLY_FEE')) {
    return extractedInfo?.pricing.monthlyFee ? 
      `$${extractedInfo.pricing.monthlyFee.toLocaleString()}` : '$500.000';
  } else if (ph.includes('TOTAL_DELIVERY_TIME')) {
    return extractedInfo?.timeline || '4-6 semanas';
  } else if (ph.includes('SAVINGS_BENEFIT_1')) {
    return 'Optimizaci√≥n de procesos y reducci√≥n de tiempos';
  } else if (ph.includes('SAVINGS_BENEFIT_2')) {
    return 'Mejora en la eficiencia operativa';
  } else if (ph.includes('SAVINGS_BENEFIT_3')) {
    return 'Automatizaci√≥n de tareas repetitivas';
  } else if (ph.includes('MONTHLY_SAVINGS_AMOUNT')) {
    return '$2.000.000';
  } else if (ph.includes('MONTHLY_SAVINGS_DESCRIPTION')) {
    return 'Ahorro mensual estimado por optimizaci√≥n de procesos';
  } else if (ph.includes('ROI_TIME')) {
    return '8-12 meses';
  } else if (ph.includes('ROI_DESCRIPTION')) {
    return 'Tiempo estimado para recuperar la inversi√≥n';
  } else if (ph.includes('IMPLEMENTATION_FEATURE_1')) {
    return 'Configuraci√≥n completa del sistema';
  } else if (ph.includes('IMPLEMENTATION_FEATURE_2')) {
    return 'Capacitaci√≥n del equipo';
  } else if (ph.includes('IMPLEMENTATION_FEATURE_3')) {
    return 'Documentaci√≥n t√©cnica completa';
  } else if (ph.includes('IMPLEMENTATION_FEATURE_4')) {
    return 'Soporte t√©cnico post-implementaci√≥n';
  } else if (ph.includes('PAYMENT_PLAN_1')) {
    return '50% al iniciar el proyecto';
  } else if (ph.includes('PAYMENT_PLAN_2')) {
    return '30% en la entrega del primer entregable';
  } else if (ph.includes('PAYMENT_PLAN_3')) {
    return '20% al finalizar el proyecto';
  } else if (ph.includes('SOLUTION_DESCRIPTION')) {
    return extractedInfo?.projectSummary || 
      `Soluci√≥n personalizada que aborda las necesidades espec√≠ficas de ${clientData.clientCompany || clientData.clientName} para optimizar sus procesos y mejorar su eficiencia operativa.`;
  } else if (ph.includes('SOLUTION_BENEFIT_SUMMARY')) {
    return `Con esta soluci√≥n, ${clientData.clientCompany || clientData.clientName} obtendr√° una herramienta robusta y escalable que mejorar√° significativamente su productividad y competitividad en el mercado.`;
  } else if (ph.includes('PRICE') || ph.includes('COST') || ph.includes('TOTAL')) {
    return '$15.000.000';
  } else if (ph.includes('TIME') || ph.includes('WEEK') || ph.includes('MONTH')) {
    return '4-6 semanas';
  } else if (ph.includes('DESCRIPTION')) {
    return `Componente especializado del proyecto ${clientData.projectName} para ${clientData.clientCompany || clientData.clientName}`;
  } else {
    return `Contenido personalizado para ${clientData.clientCompany || clientData.clientName} - ${placeholder}`;
  }
}

private async extractProjectInformation(projectPrompt: string): Promise<ExtractedProjectInfo> {
  console.log('üîç Extrayendo informaci√≥n estructurada del prompt...');

  const extractionPrompt = `
Analiza el siguiente prompt de proyecto y extrae informaci√≥n estructurada:

PROMPT DEL PROYECTO:
"${projectPrompt}"

Extrae y estructura la siguiente informaci√≥n:

1. RESUMEN DEL PROYECTO: Un resumen profesional de 2-3 l√≠neas de lo que se va a entregar
2. SERVICIOS: Lista de servicios/funcionalidades principales mencionados
3. PRECIOS: Cualquier menci√≥n de costos, fees, precios (busca n√∫meros + COP, pesos, USD, etc.)
4. TIMELINE: Cualquier menci√≥n de tiempos de entrega o implementaci√≥n
5. BENEFICIOS: Beneficios o valor agregado mencionados

FORMATO DE RESPUESTA - SOLO JSON V√ÅLIDO:
{
 "projectSummary": "Resumen profesional del proyecto en 2-3 l√≠neas",
 "services": ["Servicio 1", "Servicio 2", "etc"],
 "pricing": {
   "implementationFee": n√∫mero_o_null,
   "monthlyFee": n√∫mero_o_null,
   "totalAmount": n√∫mero_o_null,
   "description": "descripci√≥n de la estructura de precios"
 },
 "timeline": "tiempo estimado o null",
 "benefits": ["Beneficio 1", "Beneficio 2", "etc"]
}

IMPORTANTE: 
- Si mencionan precios espec√≠ficos, √∫salos EXACTAMENTE
- Si dicen "5000.000 COP" = 5000000 (sin puntos como separadores de miles)
- Si dicen "100.000 COP" = 100000
- El projectSummary debe ser profesional y comercial, NO el prompt original

Responde √∫nicamente con el JSON v√°lido:`;

  try {
    const response = await this.anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 1500,
      temperature: 0.3,
      messages: [{ role: 'user', content: extractionPrompt }]
    });

    const content = response.content[0].type === 'text' ? response.content[0].text : '{}';
    
    const jsonMatch = content.trim().match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.warn('‚ö†Ô∏è No se pudo extraer informaci√≥n estructurada, usando fallback');
      return this.createFallbackProjectInfo(projectPrompt);
    }

    try {
      const extractedInfo = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ Informaci√≥n extra√≠da exitosamente');
      return extractedInfo;
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Error parseando informaci√≥n extra√≠da, usando fallback');
      return this.createFallbackProjectInfo(projectPrompt);
    }

  } catch (error) {
    console.error('‚ùå Error extrayendo informaci√≥n:', error);
    return this.createFallbackProjectInfo(projectPrompt);
  }
}

private createFallbackProjectInfo(projectPrompt: string): ExtractedProjectInfo {
  return {
    projectSummary: `Proyecto personalizado seg√∫n requerimientos espec√≠ficos del cliente`,
    services: ['Desarrollo personalizado', 'Implementaci√≥n', 'Soporte t√©cnico'],
    pricing: {
      implementationFee: null,
      monthlyFee: null,
      totalAmount: null,
      description: 'Precio a definir seg√∫n alcance'
    },
    timeline: '4-6 semanas',
    benefits: ['Soluci√≥n personalizada', 'Soporte especializado', 'Implementaci√≥n completa']
  };
}

async generateQuotationFallback(
  fullTemplate: string,
  clientData: any
): Promise<string> {
  console.log('üîÑ Usando m√©todo de fallback con reemplazos b√°sicos...');
  
  const extractedInfo = await this.extractProjectInformation(clientData.projectDescription);
  const defaultValues = this.getUniversalBaseValues(clientData, extractedInfo);
  const placeholders = this.extractPlaceholders(fullTemplate);
  let result = fullTemplate;
  
  // Aplicar valores por defecto
  for (const [key, value] of Object.entries(defaultValues)) {
    result = result.replace(new RegExp(`\\{\\{${key}\\}\\}`, 'g'), value);
  }
  
  // Reemplazar placeholders restantes con valores gen√©ricos
  const remainingPlaceholders = result.match(/\{\{[^}]+\}\}/g);
  if (remainingPlaceholders) {
    for (const placeholder of remainingPlaceholders) {
      const placeholderName = placeholder.replace(/[{}]/g, '');
      const genericValue = this.generateGenericValue(placeholderName, clientData, extractedInfo);
      result = result.replace(new RegExp(`\\{\\{${placeholderName}\\}\\}`, 'g'), genericValue);
    }
  }
  
  console.log(`‚úÖ Fallback completado: ${placeholders.length} placeholders procesados`);
  return result;
}

async generateProjectSummary(generatedHtml: string, clientData: any): Promise<string> {
  console.log('ü§ñ Generando resumen del proyecto con AI...');
  
  const prompt = `
Analiza la siguiente cotizaci√≥n HTML generada y crea un resumen ejecutivo del proyecto.

DATOS DEL CLIENTE:
- Empresa: ${clientData.clientCompany || clientData.clientName}
- Proyecto: ${clientData.projectName}

COTIZACI√ìN HTML:
${generatedHtml}

INSTRUCCIONES:
1. Lee TODO el contenido de la cotizaci√≥n HTML
2. Identifica los servicios principales que se est√°n ofreciendo
3. Extrae el alcance del proyecto
4. Identifica los beneficios clave mencionados
5. Crea un resumen ejecutivo de 2-3 l√≠neas que describa QU√â se va a entregar

FORMATO DE RESPUESTA:
Responde √∫nicamente con el resumen ejecutivo en texto plano, sin formateo HTML, sin comillas, m√°ximo 300 caracteres.

El resumen debe ser profesional y describir espec√≠ficamente lo que se va a desarrollar/entregar.

Ejemplo: "Desarrollo de plataforma web de gesti√≥n de inventarios con dashboard en tiempo real, sistema de alertas autom√°ticas y m√≥dulo de reportes avanzados para optimizar la operaci√≥n log√≠stica."
`;

  try {
    const response = await this.anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 200,
      temperature: 0.3,
      messages: [{ role: 'user', content: prompt }]
    });

    const summary = response.content[0].type === 'text' ? response.content[0].text.trim() : '';
    
    // Limpiar el resumen de cualquier formateo adicional
    const cleanSummary = summary
      .replace(/"/g, '')
      .replace(/\n/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();

    // Limitar a 300 caracteres
    const finalSummary = cleanSummary.length > 300 
      ? cleanSummary.substring(0, 297) + '...'
      : cleanSummary;

    console.log(`‚úÖ Resumen generado: "${finalSummary}"`);
    return finalSummary;

  } catch (error) {
    console.error('‚ùå Error generando resumen:', error);
    // Fallback simple
    return `Proyecto de desarrollo personalizado para ${clientData.clientCompany || clientData.clientName}`;
  }
}
}