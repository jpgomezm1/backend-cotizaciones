// src/scripts/testGeneration.ts
import dotenv from 'dotenv';
import { db } from '../db/connection';
import { quotations, templates } from '../db/schema';
import { RAGService } from '../services/ragService';
import * as fs from 'fs';
import * as path from 'path';

dotenv.config();

async function validateHtmlStructure(html: string): Promise<{
 isValid: boolean;
 issues: string[];
 stats: {
   hasDoctype: boolean;
   hasHtml: boolean;
   hasHead: boolean;
   hasBody: boolean;
   hasStyles: boolean;
   hasCSSRules: number;
   totalLength: number;
 };
}> {
 const issues: string[] = [];
 
 const stats = {
   hasDoctype: html.includes('<!DOCTYPE html>'),
   hasHtml: html.includes('<html') && html.includes('</html>'),
   hasHead: html.includes('<head>') && html.includes('</head>'),
   hasBody: html.includes('<body') && html.includes('</body>'),
   hasStyles: html.includes('<style>') && html.includes('</style>'),
   hasCSSRules: (html.match(/\{[\s\S]*?\}/g) || []).length,
   totalLength: html.length
 };

 if (!stats.hasDoctype) issues.push('Falta DOCTYPE');
 if (!stats.hasHtml) issues.push('Etiquetas HTML incompletas');
 if (!stats.hasHead) issues.push('Secci√≥n HEAD faltante o incompleta');
 if (!stats.hasBody) issues.push('Secci√≥n BODY faltante o incompleta');
 if (!stats.hasStyles) issues.push('Estilos CSS faltantes');
 if (stats.hasCSSRules < 10) issues.push('CSS insuficiente o perdido');

 return {
   isValid: issues.length === 0,
   issues,
   stats
 };
}

async function testQuotationGeneration() {
 try {
   console.log('üß™ Iniciando prueba con estrategia mejorada...');

   // Obtener el template m√°s reciente
   const template = await db.query.templates.findFirst({
     orderBy: (templates, { desc }) => [desc(templates.createdAt)]
   });

   if (!template) {
     throw new Error('No se encontr√≥ ning√∫n template. Ejecuta primero: npm run test:setup');
   }

   console.log('üìÑ Template encontrado:', template.name);
   console.log('üìè Tama√±o del template:', template.htmlContent.length, 'caracteres');

   // A√ëADIR DIAGN√ìSTICO
   console.log('üîç DIAGN√ìSTICO DEL TEMPLATE:');
   console.log('   üìÖ Creado:', template.createdAt);
   console.log('   üÜî ID:', template.id);

   // Buscar placeholders manualmente
   const placeholderMatches = template.htmlContent.match(/\{\{[^}]+\}\}/g);
   console.log('   üè∑Ô∏è  Placeholders encontrados:', placeholderMatches?.length || 0);
   if (placeholderMatches && placeholderMatches.length > 0) {
     const uniquePlaceholders = [...new Set(placeholderMatches.map(p => p.replace(/[{}]/g, '')))];
     console.log('   üìù Primeros 10 placeholders:', uniquePlaceholders.slice(0, 10));
   }

   // Mostrar templates disponibles
   const allTemplates = await db.query.templates.findMany({
     orderBy: (templates, { desc }) => [desc(templates.createdAt)],
     limit: 3
   });

   console.log('üìã Templates disponibles (√∫ltimos 3):');
   allTemplates.forEach((t, i) => {
     const placeholders = (t.htmlContent.match(/\{\{[^}]+\}\}/g) || []).length;
     console.log(`   ${i + 1}. ${t.name.substring(0, 50)}... (${t.htmlContent.length} chars, ${placeholders} placeholders)`);
   });

   // Validar que el template tiene placeholders
   if (!placeholderMatches || placeholderMatches.length === 0) {
     console.log('‚ùå ERROR: El template seleccionado no tiene placeholders v√°lidos');
     console.log('üí° Parece que se seleccion√≥ un template antiguo sin placeholders');
     console.log('üîß Soluci√≥n: Asegurar que test:setup cre√≥ el template correctamente');
     throw new Error('Template sin placeholders - no se puede personalizar');
   }

   console.log('‚úÖ Template v√°lido con', placeholderMatches.length, 'placeholders encontrado');

   // Validar template original
   const templateValidation = await validateHtmlStructure(template.htmlContent);
   console.log('üîç Validaci√≥n del template original:');
   console.log('   ‚úÖ V√°lido:', templateValidation.isValid ? 'S√ç' : 'NO');
   console.log('   üìä CSS Rules:', templateValidation.stats.hasCSSRules);
   if (templateValidation.issues.length > 0) {
     console.log('   ‚ö†Ô∏è Issues:', templateValidation.issues.join(', '));
   }

   // Datos de prueba m√°s espec√≠ficos
   const clientData = {
     clientName: 'Roberto Silva',
     clientCompany: 'Digital Dynamics',
     clientEmail: 'roberto@digitaldynamics.com',
     clientPhone: '+57 314 567 8901',
     clientRutNit: '900234567-1',
     projectName: 'Plataforma de An√°lisis de Datos con Machine Learning',
     projectDescription: 'Desarrollo de una plataforma integral de an√°lisis de datos que utilice algoritmos de machine learning para procesar grandes vol√∫menes de informaci√≥n, generar insights predictivos, crear dashboards interactivos en tiempo real, automatizar reportes ejecutivos y proporcionar recomendaciones inteligentes para la toma de decisiones empresariales. La plataforma debe manejar m√∫ltiples fuentes de datos, tener capacidades de ETL automatizado y escalabilidad para procesar petabytes de informaci√≥n.'
   };

   console.log('üë§ Cliente de prueba:', clientData.clientName, '-', clientData.clientCompany);
   console.log('üéØ Proyecto:', clientData.projectName.substring(0, 50) + '...');

   // Inicializar RAG Service
   const ragService = new RAGService();

   // Procesar template
   console.log('üìä Preparando template...');
   const processedTemplate = await ragService.processTemplate(template.htmlContent);

   // Generar cotizaci√≥n con estrategia mejorada
   console.log('ü§ñ Generando cotizaci√≥n con estrategia mejorada...');
   console.log('‚è±Ô∏è  Esto tomar√° algunos minutos...');
   const startTime = Date.now();
   
   let generatedHtml: string;
   
   try {
     generatedHtml = await ragService.generateQuotation(processedTemplate, clientData);
   } catch (error) {
     console.warn('‚ö†Ô∏è  M√©todo principal fall√≥, probando m√©todo de respaldo...');
     generatedHtml = await ragService.generateQuotationFallback(processedTemplate, clientData);
   }
   
   const endTime = Date.now();
   console.log(`‚úÖ Cotizaci√≥n generada en ${(endTime - startTime) / 1000}s`);

   // Validaci√≥n completa del HTML generado
   console.log('\nüîç VALIDACI√ìN COMPLETA DEL HTML GENERADO:');
   const validation = await validateHtmlStructure(generatedHtml);
   
   console.log('üìä Estad√≠sticas del HTML:');
   console.log('   üìè Tama√±o:', validation.stats.totalLength, 'caracteres');
   console.log('   üìê Ratio vs original:', (validation.stats.totalLength / template.htmlContent.length * 100).toFixed(1) + '%');
   console.log('   üèóÔ∏è  DOCTYPE:', validation.stats.hasDoctype ? '‚úÖ' : '‚ùå');
   console.log('   üåê HTML tags:', validation.stats.hasHtml ? '‚úÖ' : '‚ùå');
   console.log('   üß† HEAD section:', validation.stats.hasHead ? '‚úÖ' : '‚ùå');
   console.log('   üé® CSS styles:', validation.stats.hasStyles ? '‚úÖ' : '‚ùå');
   console.log('   üì± BODY content:', validation.stats.hasBody ? '‚úÖ' : '‚ùå');
   console.log('   üé® CSS rules:', validation.stats.hasCSSRules);

   // Verificaci√≥n de personalizaci√≥n - criterios m√°s realistas basados en placeholders reales
   const hasCompanyName = generatedHtml.toLowerCase().includes(clientData.clientCompany!.toLowerCase());
   const hasProjectName = generatedHtml.toLowerCase().includes(clientData.projectName.toLowerCase().substring(0, 20));
   const hasRutNit = generatedHtml.includes(clientData.clientRutNit!);
   const hasProposalDate = generatedHtml.includes('junio de 2025') || generatedHtml.includes('2025');

   console.log('\nüîç VERIFICACI√ìN DE PERSONALIZACI√ìN:');
   console.log('   üè¢ Nombre de la empresa:', hasCompanyName ? '‚úÖ' : '‚ùå');
   console.log('   üéØ Nombre del proyecto:', hasProjectName ? '‚úÖ' : '‚ùå');
   console.log('   üèõÔ∏è RUT/NIT del cliente:', hasRutNit ? '‚úÖ' : '‚ùå');
   console.log('   üìÖ Fecha de propuesta:', hasProposalDate ? '‚úÖ' : '‚ùå');

   const successRate = [hasCompanyName, hasProjectName, hasRutNit, hasProposalDate].filter(Boolean).length;
   console.log(`   üìà Tasa de personalizaci√≥n: ${successRate}/4 (${(successRate/4*100).toFixed(0)}%)`);

   // Verificaci√≥n adicional de contenido generado
   const hasMLContent = generatedHtml.toLowerCase().includes('machine learning') || 
                       generatedHtml.toLowerCase().includes('algoritmos') || 
                       generatedHtml.toLowerCase().includes('an√°lisis de datos');
   const hasPricingContent = generatedHtml.includes('$') && generatedHtml.includes('COP');
   const hasTimelineContent = generatedHtml.includes('semanas') || generatedHtml.includes('meses');

   console.log('\nüîç VERIFICACI√ìN DE CONTENIDO ESPEC√çFICO:');
   console.log('   ü§ñ Contenido de ML/Datos:', hasMLContent ? '‚úÖ' : '‚ùå');
   console.log('   üí∞ Informaci√≥n de precios:', hasPricingContent ? '‚úÖ' : '‚ùå');
   console.log('   ‚è∞ Cronograma definido:', hasTimelineContent ? '‚úÖ' : '‚ùå');

   const contentRate = [hasMLContent, hasPricingContent, hasTimelineContent].filter(Boolean).length;
   console.log(`   üìä Calidad del contenido: ${contentRate}/3 (${(contentRate/3*100).toFixed(0)}%)`);

   // Validaci√≥n final con criterios m√°s realistas
   console.log('\nüéØ RESULTADO FINAL:');
   console.log('   ‚úÖ HTML v√°lido:', validation.isValid ? '‚úÖ S√ç' : '‚ùå NO');
   console.log('   üé® Estilos preservados:', validation.stats.hasCSSRules > 20 ? '‚úÖ S√ç' : '‚ùå NO');
   console.log('   üë§ Personalizaci√≥n exitosa:', successRate >= 3 ? '‚úÖ S√ç' : '‚ùå NO');
   console.log('   üìã Contenido especializado:', contentRate >= 2 ? '‚úÖ S√ç' : '‚ùå NO');
   
   if (validation.issues.length > 0) {
     console.log('   ‚ö†Ô∏è  Issues encontrados:', validation.issues.join(', '));
   }

   // Criterios de √©xito m√°s realistas
   const overallSuccess = validation.isValid && 
                         validation.stats.hasCSSRules > 20 && 
                         successRate >= 3 && 
                         contentRate >= 2;
   
   console.log('   üèÜ Generaci√≥n exitosa:', overallSuccess ? '‚úÖ S√ç' : '‚ùå NO');

   // Verificaci√≥n de placeholders restantes
   const remainingPlaceholders = generatedHtml.match(/\{\{[^}]+\}\}/g);
   if (remainingPlaceholders) {
     console.log(`   ‚ö†Ô∏è Placeholders sin reemplazar: ${remainingPlaceholders.length}`);
     console.log('   üìù Primeros placeholders sin reemplazar:', remainingPlaceholders.slice(0, 3));
   } else {
     console.log('   ‚úÖ Todos los placeholders fueron reemplazados correctamente');
   }

   if (!overallSuccess) {
     console.log('\n‚ùå FALLO EN LA GENERACI√ìN - Revise los issues reportados');
     
     // Mostrar m√°s detalles para debugging
     if (successRate < 3) {
       console.log('üí° Sugerencia: Verificar que los placeholders est√°n siendo reemplazados correctamente');
     }
     if (contentRate < 2) {
       console.log('üí° Sugerencia: Revisar que el contenido espec√≠fico se est√° generando apropiadamente');
     }
   }

   // Guardar en base de datos solo si es exitosa
   if (overallSuccess) {
     console.log('\nüíæ Guardando en base de datos...');
     const [quotation] = await db.insert(quotations).values({
       organizationId: template.organizationId,
       templateId: template.id,
       clientName: clientData.clientName,
       clientCompany: clientData.clientCompany,
       clientEmail: clientData.clientEmail,
       clientPhone: clientData.clientPhone,
       clientRutNit: clientData.clientRutNit,
       projectName: clientData.projectName,
       projectDescription: clientData.projectDescription,
       generatedHtml: generatedHtml,
       status: 'generated'
     }).returning();

     // Guardar archivo con timestamp
     const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
     const outputPath = path.join(__dirname, `../../generated-quotation-${timestamp}.html`);
     fs.writeFileSync(outputPath, generatedHtml);
     console.log('üìÑ HTML generado guardado en:', outputPath);

     return quotation;
   } else {
     // Guardar archivo para debugging aunque falle
     const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
     const outputPath = path.join(__dirname, `../../failed-quotation-${timestamp}.html`);
     fs.writeFileSync(outputPath, generatedHtml);
     console.log('üêõ HTML fallido guardado para debug en:', outputPath);
     
     throw new Error('La generaci√≥n de la cotizaci√≥n no cumpli√≥ con los est√°ndares de calidad');
   }

 } catch (error) {
   console.error('‚ùå Error en generaci√≥n:', error);
   throw error;
 }
}

testQuotationGeneration()
 .then((quotation) => {
   console.log('\nüéâ PRUEBA COMPLETADA EXITOSAMENTE');
   console.log('üìã Resumen:');
   console.log('  - ID:', quotation.id);
   console.log('  - Cliente:', quotation.clientName);
   console.log('  - Empresa:', quotation.clientCompany);
   console.log('  - Proyecto:', quotation.projectName.substring(0, 50) + '...');
   console.log('\nüí° El archivo HTML est√° listo para usar');
   console.log('üåê Puedes abrir el archivo HTML en tu navegador para ver el resultado');
   console.log('üìß La cotizaci√≥n est√° lista para enviar al cliente');
   process.exit(0);
 })
 .catch((error) => {
   console.error('üí• ERROR EN LA PRUEBA:', error.message);
   console.log('\nüîß Recomendaciones:');
   console.log('  1. Verificar el template original');
   console.log('  2. Revisar el archivo de debug generado');
   console.log('  3. Ajustar los prompts si es necesario');
   console.log('  4. Verificar que todos los placeholders est√°n definidos en el template');
   process.exit(1);
 });